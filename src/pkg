--Package File API
function compress(folder)
	header = ""
	data = ""
	for _,file in pairs(listAll(folder)) do
		print("Compressing:"..file)
		me = fs.open(file,"r")
		if me ~= nil or fs.getSize(file) > 0 then
			header = header..file..";"
			data = data..me.readAll()..string.char(3)
		else
			print("Error compressing,"..file)
		end
		me.close()
	end
	header = header..string.char(3)
	pkg = fs.open(folder..".pkg","w")
	pkg.write(header..data)
	pkg.close()
end

function decompress(data, path)
	print("Extracting package to tmp folder...")
	tmp = {}
	for word in data:gmatch("([^"..string.char(3).."]+)") do
		table.insert(tmp,word)
	end
	count = 2;
	for file in tmp[1]:gmatch("([^;]+)") do
		print("Extracting:"..file)
		f = fs.open(path.."/"..file,"w")
		f.write(tmp[0+count])
		f.close()
		count = count+1
	end
end

--Walks a directory including all subdirectories
function listAll(_path, _files)
  local path = _path or ""
  local files = _files or {}
  for _, file in ipairs(fs.list(path)) do
    local path = fs.combine(path, file)
    if fs.isDir(path) then
      listAll(path, files)
    else
      table.insert(files, path)
    end
  end
  return files
end

args = { ... }
repos = {}

--CLI args list
argList = {}
argList["add"] = addRepo
argList["search"] = Search
argList["install"] = install
argList["remove-repo"] = removeRepo
argList["create"] = createPackage
argList["decomp"] = decomp

function decomp()
	pkg = fs.open(args[2],"r")
	decompress(pkg.readAll(),"tmp")
	pkg.close()
end

function createPackage()
	if #args == 2 then
		compress(args[2])
	else
		print("Usage: pkg create <folder>")
	end
end

function addRepo()
	if #args == 3 then
		name = args[2]
		addr = args[3]
		repos[name] = addr
		SaveList()
	else
		print("Usage: pkg add <name> <address>")
	end
end

function SaveList()
	f = fs.open("pkg-list","w")
	f.write(textutils.serialize(repos))
	f.close()
end

function Search()
	if #args == 2 then
		query = args[2]
		for key,value in pairs(repos) do
			result = http.get(value)
			if result == nil then
				print("Failed to get repo: "..key)
			end
			data = textutils.unserialise(result.readAll())
			if data == nil then
				print(key.." can't read manifest")
			else
				for k,v in pairs(data["packages"]) do
					if string.match(k,query) then
						print(k)
					end
				end
			end
		end
	else
		print("Usage: pkg search <term>")
	end
end

function install()
	if #args == 2 then
		query = args[2]
		for key,value in pairs(repos) do
			result = http.get(value)
			if result == nil then
				print("Failed to get repo: "..key)
			else
				data = textutils.unserialise(result.readAll())
				if data == nil then
					print(key.." can't read manifest")
				else
					for k,v in pairs(data["packages"]) do
						if k == query then
							if v["type"] == "github" then
								fileResult = http.get(v["addr"])
								if fileResult == nil then
									print("Failed to get file, connection error")
								else
									decompress(fileResult.readAll(),"tmp")
									path = ""
									if(fs.exists("tmp/manifest")) then
										path = "tmp"
										RunInstall(path)
									elseif fs.exists(fs.list("tmp")[1].."/manifest") then
										path = "tmp/"..fs.list("tmp")[1]
										RunInstall(path)
									else
										print("Can't find manifest file")
									end
								end
							end
						end
					end
				end
			end
		end
	else
		print("Usage: pkg install <package>")
	end	
end

function RunInstall(path)
	print("Tmp Path:"..path)
	data = {}
	man = fs.open(path.."/manifest","r")
	data = textutils.unserialize(man.readAll())
	man.close()
	if data ~= nil then
		fs.delete(path.."/manifest")
		for _,f in pairs(listAll(path)) do
			print("Installing:"..f:sub(path:len()+2))
			fs.copy(f,data["install"].."/"..f:sub(path:len()+2))
		end
	else
		print("Can't read manifest file")
	end
end

function removeRepo()
	if #args == 2 then
		repos[args[2]] = nil
		SaveList()
	else
		print("Usage: pkg remove-repo <name>")
	end
end

if fs.exists("pkg-list") then
	f = fs.open("pkg-list","r")
	repos = textutils.unserialize(f.readAll())
	f.close()
	if repos == nil then
		repos = {}
		print("error")
	end	
end	

if #args > 0 then
	if argList[args[1]] == nil then
		print("invalid arg")
	else
		argList[args[1]]()
	end
else
	print("more args")
end